// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toComic(json) {
    return cast(JSON.parse(json), r("Comic"));
}

function comicToJson(value) {
    return JSON.stringify(uncast(value, r("Comic")), null, 2);
}

function invalidValue(typ, val) {
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val, typ, getProps) {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val);
    }

    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        var l = typs.length;
        for (var i = 0; i < l; i++) {
            var typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) {}
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        var result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
            : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
            : invalidValue(typ, val);
    }
    return transformPrimitive(typ, val);
}

function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}

function a(typ) {
    return { arrayItems: typ };
}

function u(...typs) {
    return { unionMembers: typs };
}

function o(props, additional) {
    return { props, additional };
}

function m(additional) {
    return { props: [], additional };
}

function r(name) {
    return { ref: name };
}

const typeMap = {
    "Comic": o([
        { json: "code", js: "code", typ: 0 },
        { json: "status", js: "status", typ: "" },
        { json: "copyright", js: "copyright", typ: "" },
        { json: "attributionText", js: "attributionText", typ: "" },
        { json: "attributionHTML", js: "attributionHTML", typ: "" },
        { json: "etag", js: "etag", typ: "" },
        { json: "data", js: "data", typ: r("Data") },
    ], false),
    "Data": o([
        { json: "offset", js: "offset", typ: 0 },
        { json: "limit", js: "limit", typ: 0 },
        { json: "total", js: "total", typ: 0 },
        { json: "count", js: "count", typ: 0 },
        { json: "results", js: "results", typ: a(r("Result")) },
    ], false),
    "Result": o([
        { json: "id", js: "id", typ: 0 },
        { json: "digitalId", js: "digitalId", typ: 0 },
        { json: "title", js: "title", typ: "" },
        { json: "issueNumber", js: "issueNumber", typ: 0 },
        { json: "variantDescription", js: "variantDescription", typ: "" },
        { json: "description", js: "description", typ: null },
        { json: "modified", js: "modified", typ: "" },
        { json: "isbn", js: "isbn", typ: "" },
        { json: "upc", js: "upc", typ: "" },
        { json: "diamondCode", js: "diamondCode", typ: "" },
        { json: "ean", js: "ean", typ: "" },
        { json: "issn", js: "issn", typ: "" },
        { json: "format", js: "format", typ: r("Format") },
        { json: "pageCount", js: "pageCount", typ: 0 },
        { json: "textObjects", js: "textObjects", typ: a("any") },
        { json: "resourceURI", js: "resourceURI", typ: "" },
        { json: "urls", js: "urls", typ: a(r("URL")) },
        { json: "series", js: "series", typ: r("Series") },
        { json: "variants", js: "variants", typ: a(r("Series")) },
        { json: "collections", js: "collections", typ: a("any") },
        { json: "collectedIssues", js: "collectedIssues", typ: a("any") },
        { json: "dates", js: "dates", typ: a(r("DateElement")) },
        { json: "prices", js: "prices", typ: a(r("Price")) },
        { json: "thumbnail", js: "thumbnail", typ: r("Thumbnail") },
        { json: "images", js: "images", typ: a(r("Thumbnail")) },
        { json: "creators", js: "creators", typ: r("Creators") },
        { json: "characters", js: "characters", typ: r("Characters") },
        { json: "stories", js: "stories", typ: r("Stories") },
        { json: "events", js: "events", typ: r("Characters") },
    ], false),
    "Characters": o([
        { json: "available", js: "available", typ: 0 },
        { json: "collectionURI", js: "collectionURI", typ: "" },
        { json: "items", js: "items", typ: a(r("Series")) },
        { json: "returned", js: "returned", typ: 0 },
    ], false),
    "Series": o([
        { json: "resourceURI", js: "resourceURI", typ: "" },
        { json: "name", js: "name", typ: "" },
    ], false),
    "Creators": o([
        { json: "available", js: "available", typ: 0 },
        { json: "collectionURI", js: "collectionURI", typ: "" },
        { json: "items", js: "items", typ: a(r("CreatorsItem")) },
        { json: "returned", js: "returned", typ: 0 },
    ], false),
    "CreatorsItem": o([
        { json: "resourceURI", js: "resourceURI", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "role", js: "role", typ: r("Role") },
    ], false),
    "DateElement": o([
        { json: "type", js: "type", typ: r("DateType") },
        { json: "date", js: "date", typ: r("DateEnum") },
    ], false),
    "Thumbnail": o([
        { json: "path", js: "path", typ: "" },
        { json: "extension", js: "extension", typ: r("Extension") },
    ], false),
    "Price": o([
        { json: "type", js: "type", typ: r("PriceType") },
        { json: "price", js: "price", typ: 3.14 },
    ], false),
    "Stories": o([
        { json: "available", js: "available", typ: 0 },
        { json: "collectionURI", js: "collectionURI", typ: "" },
        { json: "items", js: "items", typ: a(r("StoriesItem")) },
        { json: "returned", js: "returned", typ: 0 },
    ], false),
    "StoriesItem": o([
        { json: "resourceURI", js: "resourceURI", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "type", js: "type", typ: r("ItemType") },
    ], false),
    "URL": o([
        { json: "type", js: "type", typ: r("URLType") },
        { json: "url", js: "url", typ: "" },
    ], false),
    "Role": [
        "colorist",
        "colorist (cover)",
        "editor",
        "inker",
        "inker (cover)",
        "letterer",
        "painter (cover)",
        "penciler",
        "penciler (cover)",
        "writer",
    ],
    "DateEnum": [
        "2023-08-07T00:00:00-0400",
        "2023-08-29T09:41:00-0400",
        "2023-08-29T09:42:00-0400",
        "2023-09-06T00:00:00-0400",
    ],
    "DateType": [
        "digitalPurchaseDate",
        "focDate",
        "onsaleDate",
        "unlimitedDate",
    ],
    "Format": [
        "Comic",
    ],
    "Extension": [
        "jpg",
    ],
    "PriceType": [
        "printPrice",
    ],
    "ItemType": [
        "cover",
        "interiorStory",
    ],
    "URLType": [
        "detail",
        "purchase",
        "reader",
    ],
};

// module.exports = {
//     "comicToJson": comicToJson,
//     "toComic": toComic,
// };

export{comicToJson,toComic};
